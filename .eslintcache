[{"L:\\bg\\dev\\react\\redo\\redo\\src\\reportWebVitals.js":"1","L:\\bg\\dev\\react\\redo\\redo\\src\\App.js":"2","L:\\bg\\dev\\react\\redo\\redo\\src\\index.js":"3","L:\\bg\\dev\\react\\redo\\redo\\src\\components\\Header.js":"4","L:\\bg\\dev\\react\\redo\\redo\\src\\components\\Tasks.js":"5","L:\\bg\\dev\\react\\redo\\redo\\src\\components\\Task.js":"6","L:\\bg\\dev\\react\\redo\\redo\\src\\components\\Addtask.js":"7","L:\\BG\\Dev\\react\\redo\\redo\\src\\index.js":"8","L:\\BG\\Dev\\react\\redo\\redo\\src\\components\\Header.js":"9","L:\\BG\\Dev\\react\\redo\\redo\\src\\components\\Addtask.js":"10","L:\\BG\\Dev\\react\\redo\\redo\\src\\components\\Tasks.js":"11"},{"size":362,"mtime":1611212734916,"results":"12","hashOfConfig":"13"},{"size":2162,"mtime":1611406466006,"results":"14","hashOfConfig":"13"},{"size":433,"mtime":1611214905580,"results":"15","hashOfConfig":"13"},{"size":279,"mtime":1611402374582,"results":"16","hashOfConfig":"13"},{"size":307,"mtime":1611231789698,"results":"17","hashOfConfig":"13"},{"size":424,"mtime":1611406980513,"results":"18","hashOfConfig":"13"},{"size":1431,"mtime":1611315740256,"results":"19","hashOfConfig":"13"},{"size":433,"mtime":1611214905580,"results":"20","hashOfConfig":"21"},{"size":219,"mtime":1611291515881,"results":"22","hashOfConfig":"21"},{"size":1431,"mtime":1611315740256,"results":"23","hashOfConfig":"21"},{"size":307,"mtime":1611231789698,"results":"24","hashOfConfig":"21"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tjhnu",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1l0f58a",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"L:\\bg\\dev\\react\\redo\\redo\\src\\reportWebVitals.js",[],"L:\\bg\\dev\\react\\redo\\redo\\src\\App.js",["50"],"import { useState, useEffect } from \"react\"\nimport  Tasks  from \"./components/Tasks\";\nimport  Header  from \"./components/Header\";\nimport  AddTask  from \"./components/Addtask\";\n\nfunction App() {\n\n  const [showAdd, setShowAdd] = useState(true)\n  const [tasks, setTasks] = useState([])\n\n  useEffect(() => {\n    const getTasks = async () => {\n      const taskFromServer = await fetchTasks()\n      setTasks(taskFromServer)\n    }\n\n    getTasks()\n  }, [])\n\n//Fetch Task\n\nconst fetchTasks = async () => {\n  const res = await fetch('http://localhost:5000/tasks')\n  const data = await res.json()\n\n  return data\n}\nconst fetchTask = async (id) => {\n  const res = await fetch(`http://localhost:5000/tasks/${id}`)\n  const data = await res.json()\n\n  return data\n}\n//Add Task\n\n  const addTask = async (task) => {\n\n    const res = await fetch('http://localhost:5000/tasks', {method: 'POST', headers: {\n      'Content-type': 'application/json'\n    }, body: JSON.stringify(task)})\n\n    const data = await res.json()\n\n    setTasks([...tasks, data])\n      // const id = Math.floor(Math.random() * 10000) + 1 \n      // const newTask = { id, ...task}\n\n      // setTasks([...tasks, newTask])\n  }\n  const deleteTask = async (id) => {\n      \n    await fetch(`http://localhost:5000/tasks/${id}`, {method: 'DELETE', })\n\n    setTasks(tasks.filter((task) => task.id !== id))\n  }\n\n  const toggleReminder = async (id) => {\n\n    const taskToToggle = await fetchTask(id)\n    const updTask = { ...taskToToggle, reminder: !taskToToggle.reminder }\n\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {method: 'PUT', headers: {'Content-type': 'application/json'}, body: JSON.stringify(updTask)})\n    const data = await res.json()\n\n    setTasks(\n        tasks.map((task) => \n        task.id === id ? { ...task, reminder: !task.reminder } : task\n         )\n      )\n  }\n\n  return (\n    <div className=\"container\">\n     <Header onBtn={() => setShowAdd(!showAdd)} showAdd={showAdd} />\n     {showAdd && <AddTask onAdd={addTask}/>}\n     {tasks.length > 0 ? <Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleReminder}/> : 'Show nothing here!!!'}\n    </div>\n  );\n}\n\nexport default App;\n","L:\\bg\\dev\\react\\redo\\redo\\src\\index.js",[],["51","52"],"L:\\bg\\dev\\react\\redo\\redo\\src\\components\\Header.js",[],"L:\\bg\\dev\\react\\redo\\redo\\src\\components\\Tasks.js",[],"L:\\bg\\dev\\react\\redo\\redo\\src\\components\\Task.js",[],"L:\\bg\\dev\\react\\redo\\redo\\src\\components\\Addtask.js",[],["53","54"],"L:\\BG\\Dev\\react\\redo\\redo\\src\\index.js",[],"L:\\BG\\Dev\\react\\redo\\redo\\src\\components\\Header.js",[],"L:\\BG\\Dev\\react\\redo\\redo\\src\\components\\Addtask.js",[],"L:\\BG\\Dev\\react\\redo\\redo\\src\\components\\Tasks.js",[],{"ruleId":"55","severity":1,"message":"56","line":63,"column":11,"nodeType":"57","messageId":"58","endLine":63,"endColumn":15},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"59","replacedBy":"63"},{"ruleId":"61","replacedBy":"64"},"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["65"],"no-negated-in-lhs",["66"],["65"],["66"],"no-global-assign","no-unsafe-negation"]